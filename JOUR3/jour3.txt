JOB01
["Installation MongoDB"]

JOB02
["Afficher l’ensemble des bases de données présentes
dans Compass."
Commandes : > show dbs
Résultats dans le terminal:
admin   40.00 KiB
config  72.00 KiB
local   40.00 KiB]

JOB03 
["Avec le terminal MongoSH: 
  -créer une base de données "shop"
  - ajouter une collection "product" avec ces champs “name” ⇒ chaussure, “description” ⇒ une paire de chaussures,
    “price” ⇒ 35, “quantity” ⇒ 120

Commande: >use shop
Résultat: <switched to db shop

Commande: >db.createCollection("product")
Résultat: < { ok: 1 }

Commande: > db.product.insertOne({
                "name": "chaussure",
                "description": "une paire de chaussures",
                "price": 35,
                "quantity": 120  })
Résultat: <  { acknowledged: true,
               insertedId: ObjectId('6644b3790d13f7ba4689619d')}
]

JOB04 
 [Ajouter à la collection 'product' ces documents: name ⇒ “Pantalon noir”, description ⇒ “Un pantalon noir”, price ⇒ 14,99,
quantity ⇒ 12 ET name ⇒ “chaussettes”, description ⇒ “chaussettes cool !”, price ⇒ 6,
quantity ⇒ 6

Commande: > db.product.insertOne({
                "name": "Pantalon noir",
                "description": "Un pantalon noir",
                "price": 19.99,
                "quantity": 12
})
Résultat: < {acknowledged: true,
           insertedId: ObjectId('6644b7de0d13f7ba4689619e')}

Commande: > db.product.insertOne({
                "name": "Chaussettes",
                "description": "Des chaussettes cool",
                "price": 6,
                "quantity": 6})
Résultat: < { acknowledged: true,
             insertedId: ObjectId('6644b8100d13f7ba4689619f')}
]

JOB05 
[Créer nouvelle collection 'category' (avec 3 documents; des catégories) documents: name ⇒ “Pantalon noir”, description ⇒ “Un pantalon noir”, price ⇒ 14,99,

Commande: >db.createCollection("category")
Résultat: < { ok: 1 }

Commande: >db.category.insertMany([
            {"name": "Habits" },
            {"name": "Accessoires" },
            {"name": "Chaussures" }
    ])

Résultat: <  {acknowledged: true,
              insertedIds: { '0': ObjectId('6644beb70d13f7ba468961a0'),
              '1': ObjectId('6644beb70d13f7ba468961a1'),
              '2': ObjectId('6644beb70d13f7ba468961a2')  }}
]

JOB06 
["Afficher l’ensemble des collections de la base de données."
Commande: >show collections
Résultat: <category
           product
]

JOB07 
["Récupérer l’ensemble des données de la collections 'category' "
Commande: >db.category.find()
Résultat: < { _id: ObjectId('6644beb70d13f7ba468961a0'),
              name: 'Habits'}
              { _id: ObjectId('6644beb70d13f7ba468961a1'),
              name: 'Accessoires'}
              { _id: ObjectId('6644beb70d13f7ba468961a2'),
              name: 'Chaussures'}
]

JOB08 
["Requête permettant d’afficher seulement 2 catégories.
Commande: >db.category.find().limit(2)
Résultat: >  { _id: ObjectId('6644beb70d13f7ba468961a0'),
              name: 'Habits'}
              { _id: ObjectId('6644beb70d13f7ba468961a1'),
              name: 'Accessoires'}
]

JOB09 
["requête qui récupère produits classés par prix croissant"
Commande: > db.product.find().sort({ price: 1 })
 Résultat: <         { _id: ObjectId('6644b8100d13f7ba4689619f'),
                        name: 'Chaussettes',
                        description: 'Des chaussettes cool',
                        price: 6,
                        quantity: 6}
                      { _id: ObjectId('6644b7de0d13f7ba4689619e'),
                        name: 'Pantalon noir',
                        description: 'Un pantalon noir',
                        price: 19.99,
                        quantity: 12}
                      { _id: ObjectId('6644b3790d13f7ba4689619d'),
                              name: 'chaussure',
                              description: 'une paire de chaussures',
                              price: 35,
                              quantity: 120}
]

JOB10
["Requête qui récupère produits classés par prix décroissant"
Commande: >db.product.find().sort({ price: -1 })
Résultat: <{ _id: ObjectId('6644b3790d13f7ba4689619d'),
              name: 'chaussure',
              description: 'une paire de chaussures',
              price: 35,
              quantity: 120}
              { _id: ObjectId('6644b7de0d13f7ba4689619e'),
                name: 'Pantalon noir',
                description: 'Un pantalon noir',
                price: 19.99,
                quantity: 12}
              { _id: ObjectId('6644b8100d13f7ba4689619f'),
                name: 'Chaussettes',
                description: 'Des chaussettes cool',
                price: 6,
                quantity: 6}
]

JOB11
["Requête qui  recup les produits ayant un prix
supérieur à 5euros et un stock inférieur à 100."
Commande: > db.product.find({ price: { $gt: 5 }, quantity: { $lt: 100 } })
Résultat: < { _id: ObjectId('6644b7de0d13f7ba4689619e'),
              name: 'Pantalon noir',
              description: 'Un pantalon noir',
              price: 19.99,
              quantity: 12}
              { _id: ObjectId('6644b7de0d13f7ba4689619e'),
                name: 'Pantalon noir',
                description: 'Un pantalon noir',
                price: 19.99,
                quantity: 12}
                { _id: ObjectId('6644b8100d13f7ba4689619f'),
                  name: 'Chaussettes',
                  description: 'Des chaussettes cool',
                  price: 6,
                  quantity: 6}
]
JOB12
["Requête qui  recup les produits ayant un prix
supérieur à 14.99e et un stock supérieur à 100."
Commande: >db.product.find({$or : [{price : {$gt : 14.99 }}, {quantity : {$gt : 100}}]})
Résultat: < { _id: ObjectId('6644b3790d13f7ba4689619d'),
              name: 'chaussure',
              description: 'une paire de chaussures',
              price: 35,
              quantity: 120}
              { _id: ObjectId('6644b7de0d13f7ba4689619e'),
                name: 'Pantalon noir',
                description: 'Un pantalon noir',
                price: 19.99,
                quantity: 12}
]

JOB13
"Récupérer l’ensemble des produits sans leurs id."
Commande : >db.product.find({}, {_id : 0 })


